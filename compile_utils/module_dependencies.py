"""Information on dependencies modules including:
* Dependencies based on current OS
* Modules that need to be explicitly included in standalone builds
* Modules that are not needed in standalone builds"""

import os

from personal_compile_tools.requirements import Requirement, parse_requirements_file

module_dependencies: list[Requirement] = parse_requirements_file("requirements.txt")

compiled_modules: list[str] = ["util._generic"]

if os.name == "nt":
    compiled_modules += ["util._os_nt"]

# Some modules can't be followed normally or need to
# be checked explicitly
modules_to_include: list[str] = ["numpy._core._exceptions"]

if os.name == "nt":
    modules_to_include += ["util._os_nt"]

modules_to_skip: list[str] = [
    "argparse",
    "bz2",
    "csv",
    "email",
    "email.message",
    "email.parser",
    "hashlib",
    "numpy.__config__",
    "numpy._array_api_info",
    "numpy._configtool",
    "numpy._core._add_newdocs",
    "numpy._core._add_newdocs_scalars",
    "numpy._core._asarray",
    "numpy._core._dtype",
    "numpy._core._dtype_ctypes",
    "numpy._core._internal",
    "numpy._core._string_helpers",
    "numpy._core.cversions",
    "numpy._core.defchararray",
    "numpy._core.einsumfunc",
    "numpy._core.function_base",
    "numpy._core.memmap",
    "numpy._core.strings",
    "numpy._core.tests",
    "numpy._distributor_init",
    "numpy._expired_attrs_2_0",
    "numpy._pyinstaller",
    "numpy._pytesttester",
    "numpy._typing",
    "numpy._utils.__init__",
    "numpy._utils._convertions",
    "numpy._utils._inspect",
    "numpy._utils._pep440",
    "numpy.char",
    "numpy.conftest",
    "numpy.core",
    "numpy.ctypeslib",
    "numpy.doc.ufuncs",
    "numpy.f2py",
    "numpy.fft",
    "numpy.lib._array_utils_impl",
    "numpy.lib._arraypad_impl",
    "numpy.lib._arraysetops_impl",
    "numpy.lib._arrayterator_impl",
    "numpy.lib._datasource",
    "numpy.lib._format_impl",
    "numpy.lib._function_base_impl",
    "numpy.lib._histograms_impl",
    "numpy.lib._index_tricks_impl",
    "numpy.lib._iotools",
    "numpy.lib._nanfunctions_impl",
    "numpy.lib._npyio_impl",
    "numpy.lib._polynomial_impl",
    "numpy.lib._scimath_impl",
    "numpy.lib._shape_base_impl",
    "numpy.lib._twodim_base_impl",
    "numpy.lib._type_check_impl",
    "numpy.lib._ufunclike_impl",
    "numpy.lib._user_array_impl",
    "numpy.lib._utils_impl",
    "numpy.lib._version",
    "numpy.lib.array_utils",
    "numpy.lib.format",
    "numpy.lib.introspect",
    "numpy.lib.mixins",
    "numpy.lib.npyio",
    "numpy.lib.recfunctions",
    "numpy.lib.scimath",
    "numpy.lib.stride_tricks",
    "numpy.lib.tests",
    "numpy.lib.user_array",
    "numpy.linalg.__init__",
    "numpy.linalg._linalg",
    "numpy.linalg.linalg",
    "numpy.linalg.tests",
    "numpy.ma",
    "numpy.matlib",
    "numpy.matrixlib.__init__",
    "numpy.matrixlib.defmatrix",
    "numpy.matrixlib.tests",
    "numpy.polynomial",
    "numpy.random",
    "numpy.rec",
    "numpy.strings",
    "numpy.testing",
    "numpy.tests",
    "numpy.typing",
    "numpy.version",
    "lzma",
    "packaging",
    "PIL._deprecate",
    "PIL._typing",
    "PIL._version",
    "PIL.BdfFontFile",
    "PIL.BlpImagePlugin",
    "PIL.BmpImagePlugin",
    "PIL.BufrStubImagePlugin",
    "PIL.ContainerIO",
    "PIL.CurImagePlugin",
    "PIL.DcxImagePlugin",
    "PIL.EpsImagePlugin",
    "PIL.FitsImagePlugin",
    "PIL.FliImagePlugin",
    "PIL.FpxImagePlugin",
    "PIL.FtexImagePlugin",
    "PIL.GdImageFile",
    "PIL.GbrImagePlugin",
    "PIL.GribStubImagePlugin",
    "PIL.Hdf5StubImagePlugin",
    "PIL.IcnsImagePlugin",
    "PIL.IcoImagePlugin",
    "PIL.ImageGrab",
    "PIL.ImImagePlugin",
    "PIL.ImtImagePlugin",
    "PIL.IptcImagePlugin",
    "PIL.Jpeg2KImagePlugin",
    "PIL.McIdasImagePlugin",
    "PIL.MicImagePlugin",
    "PIL.MpegImagePlugin",
    "PIL.MpoImagePlugin",
    "PIL.MspImagePlugin",
    "PIL.PalmImagePlugin",
    "PIL.PcdImagePlugin",
    "PIL.PcfFontFile",
    "PIL.PcxImagePlugin",
    "PIL.PdfImagePlugin",
    "PIL.PdfParser",
    "PIL.PixarImagePlugin",
    "PIL.PpmImagePlugin",
    "PIL.PsdImagePlugin",
    "PIL.PSDraw",
    "PIL.QoiImagePlugin",
    "PIL.SgiImagePlugin",
    "PIL.SpiderImagePlugin",
    "PIL.SunImagePlugin",
    "PIL.TgaImagePlugin",
    "PIL.TiffImagePlugin",
    "PIL.WalImageFile",
    "PIL.WmfImagePlugin",
    "PIL.XbmImagePlugin",
    "PIL.XpmImagePlugin",
    "PIL.XVThumbImagePlugin",
    "PIL.FontFile",
    "PIL.ImageCms",
    "PIL.ImageDraw2",
    "PIL.ImageEnhance",
    "PIL.ImageFilter",
    "PIL.ImageMorph",
    "PIL.ImagePath",
    "PIL.ImageQt",
    "PIL.ImageShow",
    "PIL.ImageStat",
    "PIL.ImageTransform",
    "PIL.ImageWin",
    "PIL.TarIO",
    "PIL.features",
    "PIL.report",
    "py_compile",
    "pydoc",
    "select",
    "socket",
    "statistics",
    "urllib.error",
    "urllib.request",
]


if os.name == "nt":
    modules_to_skip += ["PIL._tkinter_finder", "selectors", "send2trash", "tempfile"]
else:
    # TODO: Skip everything but plat other?
    modules_to_skip += [
        "send2trash.mac",
        "send2trash.plat_gio",
        "send2trash.win",
    ]


def get_normalized_module_name(module: Requirement) -> str:
    """Given the name used for pip install,
    return the name used to import the module in python."""
    module_name: str = module.name.lower()

    return {"pillow": "PIL", "pyturbojpeg": "turbojpeg"}.get(module_name, module_name)
